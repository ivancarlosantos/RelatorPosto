/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrentistaSC.java
 *
 * Created on Nov 18, 2010, 11:06:17 AM
 */
package relatorpostoeaton.screens;

import com.tomtessier.scrollabledesktop.BaseInternalFrame;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import relatorpostoeaton.business.ColaboradorController;
import relatorpostoeaton.business.FrentistaController;
import relatorpostoeaton.business.datamodels.ColaboradorDataModel;
import relatorpostoeaton.business.jpa.ColaboradorJpaController;
import relatorpostoeaton.business.jpa.FrentistaJpaController;
import relatorpostoeaton.business.jpa.exceptions.NonexistentEntityException;
import relatorpostoeaton.business.jpa.exceptions.PreexistingEntityException;
import relatorpostoeaton.entities.Colaborador;
import relatorpostoeaton.entities.Frentista;

/**
 *
 * @author icarlos
 */
public final class FrentistaSC extends BaseInternalFrame {

    private static final long serialVersionUID = 1L;

    public static JRadioButton getSelection(ButtonGroup group) {
        for (Enumeration e = group.getElements(); e.hasMoreElements();) {
            JRadioButton b = (JRadioButton) e.nextElement();
            if (b.getModel() == group.getSelection()) {
                return b;
            }
        }
        return null;
    }
    private static FrentistaSC instanceFrentistaSC;
    private FrentistaController fc;
    private ColaboradorController colc;
    private LinkedList<String> tagList = new LinkedList<String>();
    private List<Colaborador> colabList = new LinkedList<Colaborador>();
    private WindowFindTagCards wftc = new WindowFindTagCards();
    private Boolean operControl = false; // false igual criar

    public void refreshTable() {
        ColaboradorJpaController cjc = new ColaboradorJpaController();
        colabList.clear();
        colabList.addAll(cjc.findColaboradorEntities());
        ColaboradorDataModel cdm = new ColaboradorDataModel(cjc.findColaboradorEntities());
        this.jTabelaFrentista.setModel(cdm);
    }

    public static FrentistaSC getInstanceFrentistaSC() {
        if (instanceFrentistaSC == null) {
            instanceFrentistaSC = new FrentistaSC();
            instanceFrentistaSC.setTitle("COLABORADOR");
        }
        return instanceFrentistaSC;
    }

    /** Creates new form FrentistaSC */
    public FrentistaSC() {
        initComponents();
        refreshTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void jBtnNovoActionPerformed(java.awt.event.ActionEvent evt) {                                         

        setFc(FrentistaController.getInstance());
        getFc().setCurrentFrentista(new Frentista());
        setColc(ColaboradorController.getInstance());
        getColc().setCurrentColaborador(new Colaborador());
        jTxtFldNomeColaborador.setText("");
        jTxtFldApelidoColaborador.setText("");
        jTxtFldNumeroCadastro.setText("");
        jFrmTxtFldDataNasc.setText("");
        jTxtFldNumeroTag.setText("");
        operControl = false;
        JOptionPane.showMessageDialog(this, "Campos Apagados Com Sucesso!", "Aviso", JOptionPane.INFORMATION_MESSAGE);
    }                                        

    private void jBtnSairActionPerformed(java.awt.event.ActionEvent evt) {                                         
        dispose();
    }                                        

    private void jBtnExcluirActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try {
            if (jChBxFrentista.isSelected()) {
                FrentistaJpaController fjc = new FrentistaJpaController();
                int die = JOptionPane.showConfirmDialog(this, "Deseja Excluir o Campo Selecionado ?", "AVISO", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                if (die == JOptionPane.YES_OPTION) {
                    fjc.destroy(fc.getCurrentFrentista().getColaboradorPK());
                    refreshTable();
                    JOptionPane.showMessageDialog(this, "Cadastro Apagado com Sucesso!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                ColaboradorJpaController cjc = new ColaboradorJpaController();
                int kill = JOptionPane.showConfirmDialog(this, "Deseja excluir o campo selecionado?", "AVISO", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                if (kill == JOptionPane.YES_OPTION) {
                    cjc.destroy(colc.getCurrentColaborador().getColaboradorPK());
                    refreshTable();
                    JOptionPane.showMessageDialog(this, "Cadastro Apagado com Sucesso !", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (NonexistentEntityException ex) {
            Logger.getLogger(FrentistaSC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                           

    private void criar() {
        if (jChBxFrentista.isSelected()) {
            FrentistaJpaController fjc = new FrentistaJpaController();
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            setFc(FrentistaController.getInstance());
            fc.getCurrentFrentista().setNomFun(jTxtFldNomeColaborador.getText());
            fc.getCurrentFrentista().setApeFun(jTxtFldApelidoColaborador.getText());
            try {
                fc.getCurrentFrentista().setDatNas(sdf.parse(jFrmTxtFldDataNasc.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(FrentistaSC.class.getName()).log(Level.SEVERE, null, ex);
            }
            fc.getCurrentFrentista().getColaboradorPK().setNumCad(Integer.parseInt(jTxtFldNumeroCadastro.getText()));
            fc.getCurrentFrentista().getColaboradorPK().setNumEmp(new Short("1"));
            fc.getCurrentFrentista().setTag(jTxtFldNumeroTag.getText());
            fc.getCurrentFrentista().getColaboradorPK().setTipCol(Short.parseShort("" + jCmbBxTipoDeColaborador.getSelectedIndex()));
            if (getSelection(btGrpSexo).equals(jBtnGrpSexoMasculino)) {
                fc.getCurrentFrentista().setTipSex("M");
            } else {
                fc.getCurrentFrentista().setTipSex("F");
            }
            if (getSelection(btGrpRegsLocal).equals(jBtnGrpRegsLocalSim)) {
                fc.getCurrentFrentista().setAtivo(true);
            } else {
                fc.getCurrentFrentista().setAtivo(false);
            }
            try {
                fjc.create(getFc().getCurrentFrentista());
                refreshTable();
                JOptionPane.showMessageDialog(this, "Campos Gravados Com Sucesso!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } catch (PreexistingEntityException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Campos Não Inseridos e/ou Gravados,Tente Novamente!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            ColaboradorJpaController cjc = new ColaboradorJpaController();
            setColc(ColaboradorController.getInstance());
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            colc.getCurrentColaborador().setNomFun(jTxtFldNomeColaborador.getText());
            colc.getCurrentColaborador().setApeFun(jTxtFldApelidoColaborador.getText());
            try {
                colc.getCurrentColaborador().setDatNas(sdf.parse(jFrmTxtFldDataNasc.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(FrentistaSC.class.getName()).log(Level.SEVERE, null, ex);
            }
            colc.getCurrentColaborador().getColaboradorPK().setNumCad(Integer.parseInt(jTxtFldNumeroCadastro.getText()));
            colc.getCurrentColaborador().setTag(jTxtFldNumeroTag.getText());
            colc.getCurrentColaborador().getColaboradorPK().setRegLocal(new Short("1"));
            colc.getCurrentColaborador().getColaboradorPK().setTipCol(Short.parseShort("" + jCmbBxTipoDeColaborador.getSelectedIndex()));
            if (getSelection(btGrpSexo).equals(jBtnGrpSexoMasculino)) {
                colc.getCurrentColaborador().setTipSex("M");
            } else {
                colc.getCurrentColaborador().setTipSex("F");
            }
            if (getSelection(btGrpRegsLocal).equals(jBtnGrpRegsLocalSim)) {
                colc.getCurrentColaborador().setAtivo(true);
            } else {
                colc.getCurrentColaborador().setAtivo(false);
            }
            try {
                cjc.create(getColc().getCurrentColaborador());
                refreshTable();
                JOptionPane.showMessageDialog(this, "Campos Gravados Com Sucesso!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } catch (PreexistingEntityException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Campos Não Inseridos e/ou Gravados,Tente Novamente!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private void editar() {
        if (jChBxFrentista.isSelected()) {
            FrentistaJpaController fjc = new FrentistaJpaController();
            setFc(FrentistaController.getInstance());
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            fc.getCurrentFrentista().setNomFun(jTxtFldNomeColaborador.getText());
            fc.getCurrentFrentista().setApeFun(jTxtFldApelidoColaborador.getText());
            try {
                fc.getCurrentFrentista().setDatNas(sdf.parse(jFrmTxtFldDataNasc.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(FrentistaSC.class.getName()).log(Level.SEVERE, null, ex);
            }
            fc.getCurrentFrentista().getColaboradorPK().setNumCad(Integer.parseInt(jTxtFldNumeroCadastro.getText()));
            fc.getCurrentFrentista().setTag(jTxtFldNumeroTag.getText());
            fc.getCurrentFrentista().getColaboradorPK().setRegLocal(new Short("1"));
            fc.getCurrentFrentista().getColaboradorPK().setTipCol(Short.parseShort("" + jCmbBxTipoDeColaborador.getSelectedIndex()));
            if (getSelection(btGrpSexo).equals(jBtnGrpSexoMasculino)) {
                fc.getCurrentFrentista().setTipSex("M");
            } else {
                fc.getCurrentFrentista().setTipSex("F");
            }
            if (getSelection(btGrpRegsLocal).equals(jBtnGrpRegsLocalSim)) {
                fc.getCurrentFrentista().setAtivo(true);
            } else {
                fc.getCurrentFrentista().setAtivo(false);
            }
            try {
                fjc.edit(getFc().getCurrentFrentista());
                refreshTable();
                JOptionPane.showMessageDialog(this, "Campos Gravados Com Sucesso!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } catch (PreexistingEntityException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Campos Não Inseridos e/ou Gravados,Tente Novamente!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else {
            ColaboradorJpaController cjc = new ColaboradorJpaController();
            setColc(ColaboradorController.getInstance());
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            colc.getCurrentColaborador().setNomFun(jTxtFldNomeColaborador.getText());
            colc.getCurrentColaborador().setApeFun(jTxtFldApelidoColaborador.getText());
            try {
                colc.getCurrentColaborador().setDatNas(sdf.parse(jFrmTxtFldDataNasc.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(FrentistaSC.class.getName()).log(Level.SEVERE, null, ex);
            }
            colc.getCurrentColaborador().getColaboradorPK().setNumCad(Integer.parseInt(jTxtFldNumeroCadastro.getText()));
            colc.getCurrentColaborador().setTag(jTxtFldNumeroTag.getText());
            colc.getCurrentColaborador().getColaboradorPK().setRegLocal(new Short("1"));
            colc.getCurrentColaborador().getColaboradorPK().setTipCol(Short.parseShort("" + jCmbBxTipoDeColaborador.getSelectedIndex()));
            if (getSelection(btGrpSexo).equals(jBtnGrpSexoMasculino)) {
                colc.getCurrentColaborador().setTipSex("M");
            } else {
                colc.getCurrentColaborador().setTipSex("F");
            }
            if (getSelection(btGrpRegsLocal).equals(jBtnGrpRegsLocalSim)) {
                colc.getCurrentColaborador().setAtivo(true);
            } else {
                colc.getCurrentColaborador().setAtivo(false);
            }
            try {
                cjc.edit(getColc().getCurrentColaborador());
                refreshTable();
                JOptionPane.showMessageDialog(this, "Campos Gravados Com Sucesso!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } catch (PreexistingEntityException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Campos Não Inseridos e/ou Gravados,Tente Novamente!", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private void tagAntenna() {
        try {
            tagList.clear();
            Socket socket = new Socket("127.0.0.1", 8080);
            System.out.println("Connected to server...sending echo string");
            ColaboradorJpaController colabjc = new ColaboradorJpaController();
            OutputStream out = socket.getOutputStream();
            out.write("select id from tag_id;\n".getBytes("US-ASCII"));
            String tagColab;
            BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            boolean sair = false;
            while (!sair) {
                tagColab = br.readLine();
                System.out.println("====Render====\n" + tagColab);
                if (tagColab.length() <= 0) {
                    sair = true;
                    br.close();
                } else {
                    jTxtFldNumeroTag.setText(tagColab);
                }
            }
            socket.close();
        } catch (UnknownHostException ex) {
            ex.printStackTrace();
            Logger.getLogger(MenuLateralSC.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            ex.printStackTrace();
            Logger.getLogger(MenuLateralSC.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    private void jBtnSalvarActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (!operControl) {
            criar();
        } else {
            editar();
        }
    }                                          

    private void jCmbBxTipoDeColaboradorActionPerformed(java.awt.event.ActionEvent evt) {                                                        
    }                                                       

    private void jTabelaFrentistaMouseClicked(java.awt.event.MouseEvent evt) {                                              
        fc = FrentistaController.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        colc = ColaboradorController.getInstance();
        Colaborador tc = colabList.get(jTabelaFrentista.getSelectedRow());
        operControl = true;

        if (tc instanceof Frentista) {
            fc.setCurrentFrentista((Frentista) tc);
            jChBxFrentista.setSelected(true);
        } else {
            colc.setCurrentColaborador(tc);
            jChBxFrentista.setSelected(false);
        }
        jTxtFldNomeColaborador.setText(tc.getNomFun());
        jTxtFldApelidoColaborador.setText(tc.getApeFun());
        jFrmTxtFldDataNasc.setText(sdf.format(tc.getDatNas()));
        jTxtFldNumeroTag.setText(tc.getColaboradorPK().getNumEmp() + "");
        jTxtFldNumeroCadastro.setText(tc.getColaboradorPK().getNumCad() + "");
        jCmbBxTipoDeColaborador.setSelectedIndex(tc.getColaboradorPK().getTipCol());

        if (tc.getTipSex().compareTo("M") == 0) {
            jBtnGrpSexoMasculino.setSelected(true);
        } else {
            jBtnGrpSexoFeminino.setSelected(true);
        }
        if (tc.getAtivo()) {
            jBtnGrpRegsLocalSim.setSelected(true);
        } else {
            jBtnGrpRegsLocalNao.setSelected(true);
        }
    }                                             

    private void jBtnOKActionPerformed(java.awt.event.ActionEvent evt) {                                       
        tagAntenna();
    }                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrentistaSC().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JLabel apelidoColaborador;
    private javax.swing.ButtonGroup btGrpRegsLocal;
    private javax.swing.ButtonGroup btGrpSexo;
    private javax.swing.JLabel dataNascimento;
    private javax.swing.JButton jBtnExcluir;
    private javax.swing.JRadioButton jBtnGrpRegsLocalNao;
    private javax.swing.JRadioButton jBtnGrpRegsLocalSim;
    private javax.swing.JRadioButton jBtnGrpSexoFeminino;
    private javax.swing.JRadioButton jBtnGrpSexoMasculino;
    private javax.swing.JButton jBtnNovo;
    private javax.swing.JButton jBtnOK;
    private javax.swing.JButton jBtnSair;
    private javax.swing.JButton jBtnSalvar;
    private javax.swing.JCheckBox jChBxFrentista;
    private javax.swing.JComboBox jCmbBxTipoDeColaborador;
    private javax.swing.JFormattedTextField jFrmTxtFldDataNasc;
    private javax.swing.JPanel jPanelBtnSelecionar;
    private javax.swing.JPanel jPanelFrentista;
    private javax.swing.JPanel jPanelRegsLocal;
    private javax.swing.JPanel jPanelSexo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTabelaFrentista;
    private javax.swing.JTextField jTxtFldApelidoColaborador;
    private javax.swing.JTextField jTxtFldNomeColaborador;
    private javax.swing.JTextField jTxtFldNumeroCadastro;
    private javax.swing.JTextField jTxtFldNumeroTag;
    private javax.swing.JLabel nomeColaborador;
    private javax.swing.JLabel numeroCadastro;
    private javax.swing.JLabel numeroTag;
    private javax.swing.JLabel tipoColaborador;
    // End of variables declaration

    /**
     * @return the fc
     */
    public FrentistaController getFc() {
        return fc;
    }

    /**
     * @param fc the fc to set
     */
    public void setFc(FrentistaController fc) {
        this.fc = fc;
    }

    public ColaboradorController getColc() {
        return colc;
    }

    private void setColc(ColaboradorController colc) {
        this.colc = colc;
    }
}

